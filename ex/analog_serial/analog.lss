
analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  00000740  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000082  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000d8  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020a  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a7a  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002e1  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000da7  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  00002c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000428  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b2d  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00003d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static uint8_t aref = (1<<REFS0); // default to aref = Vcc

void analogReference(uint8_t mode) 
{
    aref = mode & 0xC0;
}
   0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
}

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
   2:	00 00       	nop
   4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__bad_interrupt>
   6:	00 00       	nop
   8:	d6 c0       	rjmp	.+428    	; 0x1b6 <__bad_interrupt>
   a:	00 00       	nop
   c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__bad_interrupt>
   e:	00 00       	nop
  10:	d2 c0       	rjmp	.+420    	; 0x1b6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d0 c0       	rjmp	.+416    	; 0x1b6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ce c0       	rjmp	.+412    	; 0x1b6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ca c0       	rjmp	.+404    	; 0x1b6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c8 c0       	rjmp	.+400    	; 0x1b6 <__bad_interrupt>
  26:	00 00       	nop
  28:	94 c1       	rjmp	.+808    	; 0x352 <__vector_10>
  2a:	00 00       	nop
  2c:	cd c1       	rjmp	.+922    	; 0x3c8 <__vector_11>
  2e:	00 00       	nop
  30:	c2 c0       	rjmp	.+388    	; 0x1b6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__bad_interrupt>
  36:	00 00       	nop
  38:	be c0       	rjmp	.+380    	; 0x1b6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ba c0       	rjmp	.+372    	; 0x1b6 <__bad_interrupt>
  42:	00 00       	nop
  44:	b8 c0       	rjmp	.+368    	; 0x1b6 <__bad_interrupt>
  46:	00 00       	nop
  48:	b6 c0       	rjmp	.+364    	; 0x1b6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b4 c0       	rjmp	.+360    	; 0x1b6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b2 c0       	rjmp	.+356    	; 0x1b6 <__bad_interrupt>
  52:	00 00       	nop
  54:	b0 c0       	rjmp	.+352    	; 0x1b6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ae c0       	rjmp	.+348    	; 0x1b6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ac c0       	rjmp	.+344    	; 0x1b6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	aa c0       	rjmp	.+340    	; 0x1b6 <__bad_interrupt>
  62:	00 00       	nop
  64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a2 c0       	rjmp	.+324    	; 0x1b6 <__bad_interrupt>
  72:	00 00       	nop
  74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__bad_interrupt>
  76:	00 00       	nop
  78:	9e c0       	rjmp	.+316    	; 0x1b6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9c c0       	rjmp	.+312    	; 0x1b6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9a c0       	rjmp	.+308    	; 0x1b6 <__bad_interrupt>
  82:	00 00       	nop
  84:	98 c0       	rjmp	.+304    	; 0x1b6 <__bad_interrupt>
  86:	00 00       	nop
  88:	96 c0       	rjmp	.+300    	; 0x1b6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	94 c0       	rjmp	.+296    	; 0x1b6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	92 c0       	rjmp	.+292    	; 0x1b6 <__bad_interrupt>
  92:	00 00       	nop
  94:	90 c0       	rjmp	.+288    	; 0x1b6 <__bad_interrupt>
  96:	00 00       	nop
  98:	8e c0       	rjmp	.+284    	; 0x1b6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8c c0       	rjmp	.+280    	; 0x1b6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8a c0       	rjmp	.+276    	; 0x1b6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	88 c0       	rjmp	.+272    	; 0x1b6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	86 c0       	rjmp	.+268    	; 0x1b6 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <pin_to_mux.1400>:
  ac:	00 01 04 06 07 25 24 23 22 21 20                    .....%$#"! 

000000b7 <descriptor_list>:
  b7:	00 01 00 00 eb 00 12 00 02 00 00 fd 00 43 00 03     .............C..
  c7:	00 00 40 01 04 01 03 09 04 44 01 14 02 03 09 04     ..@......D......
  d7:	5a 01 16 03 03 09 04 72 01 0c                       Z......r..

000000e1 <endpoint_config_table>:
  e1:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000eb <device_descriptor>:
  eb:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  fb:	03 01                                               ..

000000fd <config1_descriptor>:
  fd:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 10d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 11d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 12d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 13d:	40 00 00                                            @..

00000140 <string0>:
 140:	04 03 09 04                                         ....

00000144 <string1>:
 144:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 154:	6d 00 65 00 00 00                                   m.e...

0000015a <string2>:
 15a:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 16a:	69 00 61 00 6c 00 00 00                             i.a.l...

00000172 <string3>:
 172:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000180 <__ctors_end>:
 180:	11 24       	eor	r1, r1
 182:	1f be       	out	0x3f, r1	; 63
 184:	cf ef       	ldi	r28, 0xFF	; 255
 186:	da e0       	ldi	r29, 0x0A	; 10
 188:	de bf       	out	0x3e, r29	; 62
 18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b1 e0       	ldi	r27, 0x01	; 1
 192:	e2 ea       	ldi	r30, 0xA2	; 162
 194:	f6 e0       	ldi	r31, 0x06	; 6
 196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
 198:	05 90       	lpm	r0, Z+
 19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
 19c:	aa 30       	cpi	r26, 0x0A	; 10
 19e:	b1 07       	cpc	r27, r17
 1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	aa e0       	ldi	r26, 0x0A	; 10
 1a6:	b1 e0       	ldi	r27, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
 1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
 1ac:	a0 31       	cpi	r26, 0x10	; 16
 1ae:	b1 07       	cpc	r27, r17
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
 1b2:	31 d0       	rcall	.+98     	; 0x216 <main>
 1b4:	74 c2       	rjmp	.+1256   	; 0x69e <_exit>

000001b6 <__bad_interrupt>:
 1b6:	24 cf       	rjmp	.-440    	; 0x0 <__vectors>

000001b8 <adc_read>:

int16_t adc_read(uint8_t mux)
{
    uint8_t low;

    ADCSRA = (1<<ADEN) | ADC_PRESCALER;
 1b8:	96 e8       	ldi	r25, 0x86	; 134
 1ba:	90 93 7a 00 	sts	0x007A, r25
    ADCSRB = (1<<ADHSM) | (mux & 0x20);
 1be:	98 2f       	mov	r25, r24
 1c0:	90 72       	andi	r25, 0x20	; 32
 1c2:	90 68       	ori	r25, 0x80	; 128
 1c4:	90 93 7b 00 	sts	0x007B, r25
    ADMUX = aref | (mux & 0x1F);
 1c8:	8f 71       	andi	r24, 0x1F	; 31
 1ca:	90 91 01 01 	lds	r25, 0x0101
 1ce:	98 2b       	or	r25, r24
 1d0:	90 93 7c 00 	sts	0x007C, r25
    ADCSRA = (1<<ADEN) | ADC_PRESCALER | (1<<ADSC);
 1d4:	86 ec       	ldi	r24, 0xC6	; 198
 1d6:	80 93 7a 00 	sts	0x007A, r24
    while (ADCSRA & (1<<ADSC));
 1da:	80 91 7a 00 	lds	r24, 0x007A
 1de:	86 fd       	sbrc	r24, 6
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <adc_read+0x22>
    low = ADCL;
 1e2:	20 91 78 00 	lds	r18, 0x0078
    return (ADCH << 8) | low;
 1e6:	40 91 79 00 	lds	r20, 0x0079
 1ea:	94 2f       	mov	r25, r20
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	28 2b       	or	r18, r24
 1f2:	39 2b       	or	r19, r25
}
 1f4:	c9 01       	movw	r24, r18
 1f6:	08 95       	ret

000001f8 <analogRead>:
int16_t analogRead(uint8_t pin)
{
    static const uint8_t PROGMEM pin_to_mux[] = {
        0x00, 0x01, 0x04, 0x06, 0x07,
        0x25, 0x24, 0x23, 0x22, 0x21, 0x20};
    if (pin >= 12) return 0;
 1f8:	8c 30       	cpi	r24, 0x0C	; 12
 1fa:	18 f0       	brcs	.+6      	; 0x202 <analogRead+0xa>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	08 c0       	rjmp	.+16     	; 0x212 <analogRead+0x1a>
    return adc_read(pgm_read_byte(pin_to_mux + pin));
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e4 55       	subi	r30, 0x54	; 84
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	e4 91       	lpm	r30, Z+
 20c:	8e 2f       	mov	r24, r30
 20e:	d4 df       	rcall	.-88     	; 0x1b8 <adc_read>
 210:	9c 01       	movw	r18, r24
}
 212:	c9 01       	movw	r24, r18
 214:	08 95       	ret

00000216 <main>:
int analogR;

// Very simple character echo test
int main(void)
{
	CPU_PRESCALE(0);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	80 93 61 00 	sts	0x0061, r24
 21c:	10 92 61 00 	sts	0x0061, r1
	usb_init();
 220:	18 d0       	rcall	.+48     	; 0x252 <usb_init>
    LED_CONFIG;
 222:	56 9a       	sbi	0x0a, 6	; 10
    LED_OFF;
 224:	5e 9a       	sbi	0x0b, 6	; 11
	while (1) {
        analogR = analogRead(1);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	e7 df       	rcall	.-50     	; 0x1f8 <analogRead>
 22a:	90 93 0f 01 	sts	0x010F, r25
 22e:	80 93 0e 01 	sts	0x010E, r24
		int n = usb_serial_getchar();
 232:	28 d0       	rcall	.+80     	; 0x284 <usb_serial_getchar>
		if (n >= 0) usb_serial_putchar(n);
 234:	97 fd       	sbrc	r25, 7
 236:	01 c0       	rjmp	.+2      	; 0x23a <main+0x24>
 238:	4a d0       	rcall	.+148    	; 0x2ce <usb_serial_putchar>
        usb_serial_putchar(analogR);
 23a:	80 91 0e 01 	lds	r24, 0x010E
 23e:	47 d0       	rcall	.+142    	; 0x2ce <usb_serial_putchar>
        if (analogR > 0) {
 240:	80 91 0e 01 	lds	r24, 0x010E
 244:	90 91 0f 01 	lds	r25, 0x010F
 248:	18 16       	cp	r1, r24
 24a:	19 06       	cpc	r1, r25
 24c:	5c f7       	brge	.-42     	; 0x224 <main+0xe>
            LED_ON;
 24e:	5e 98       	cbi	0x0b, 6	; 11
 250:	ea cf       	rjmp	.-44     	; 0x226 <main+0x10>

00000252 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 258:	80 ea       	ldi	r24, 0xA0	; 160
 25a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 25e:	82 e1       	ldi	r24, 0x12	; 18
 260:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 262:	09 b4       	in	r0, 0x29	; 41
 264:	00 fe       	sbrs	r0, 0
 266:	fd cf       	rjmp	.-6      	; 0x262 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 268:	80 e9       	ldi	r24, 0x90	; 144
 26a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 26e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 272:	10 92 0a 01 	sts	0x010A, r1
	cdc_line_rtsdtr = 0;
 276:	10 92 0b 01 	sts	0x010B, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 280:	78 94       	sei
}
 282:	08 95       	ret

00000284 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 284:	2f b7       	in	r18, 0x3f	; 63
	cli();
 286:	f8 94       	cli
	if (!usb_configuration) {
 288:	80 91 0a 01 	lds	r24, 0x010A
 28c:	88 23       	and	r24, r24
 28e:	69 f0       	breq	.+26     	; 0x2aa <usb_serial_getchar+0x26>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	80 93 e9 00 	sts	0x00E9, r24
	retry:
	c = UEINTX;
	if (!(c & (1<<RWAL))) {
		// no data in buffer
		if (c & (1<<RXOUTI)) {
			UEINTX = 0x6B;
 296:	9b e6       	ldi	r25, 0x6B	; 107
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
	retry:
	c = UEINTX;
 298:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(c & (1<<RWAL))) {
 29c:	85 fd       	sbrc	r24, 5
 29e:	09 c0       	rjmp	.+18     	; 0x2b2 <usb_serial_getchar+0x2e>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
 2a0:	82 ff       	sbrs	r24, 2
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <usb_serial_getchar+0x26>
			UEINTX = 0x6B;
 2a4:	90 93 e8 00 	sts	0x00E8, r25
 2a8:	f7 cf       	rjmp	.-18     	; 0x298 <usb_serial_getchar+0x14>
			goto retry;
		}	
		SREG = intr_state;
 2aa:	2f bf       	out	0x3f, r18	; 63
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	3f ef       	ldi	r19, 0xFF	; 255
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <usb_serial_getchar+0x46>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
 2b2:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 2b6:	80 91 e8 00 	lds	r24, 0x00E8
 2ba:	85 fd       	sbrc	r24, 5
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <usb_serial_getchar+0x40>
 2be:	8b e6       	ldi	r24, 0x6B	; 107
 2c0:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 2c4:	2f bf       	out	0x3f, r18	; 63
	return c;
 2c6:	29 2f       	mov	r18, r25
 2c8:	30 e0       	ldi	r19, 0x00	; 0
}
 2ca:	c9 01       	movw	r24, r18
 2cc:	08 95       	ret

000002ce <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
 2ce:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 2d0:	80 91 0a 01 	lds	r24, 0x010A
 2d4:	88 23       	and	r24, r24
 2d6:	d9 f1       	breq	.+118    	; 0x34e <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 2d8:	2f b7       	in	r18, 0x3f	; 63
	cli();
 2da:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 2e2:	80 91 0d 01 	lds	r24, 0x010D
 2e6:	88 23       	and	r24, r24
 2e8:	41 f0       	breq	.+16     	; 0x2fa <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 2ea:	80 91 e8 00 	lds	r24, 0x00E8
 2ee:	85 fd       	sbrc	r24, 5
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <usb_serial_putchar+0x28>
			SREG = intr_state;
 2f2:	2f bf       	out	0x3f, r18	; 63
 2f4:	12 c0       	rjmp	.+36     	; 0x31a <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
 2f6:	10 92 0d 01 	sts	0x010D, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 2fa:	90 91 e4 00 	lds	r25, 0x00E4
 2fe:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 300:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 302:	80 91 e8 00 	lds	r24, 0x00E8
 306:	85 fd       	sbrc	r24, 5
 308:	13 c0       	rjmp	.+38     	; 0x330 <usb_serial_putchar+0x62>
		SREG = intr_state;
 30a:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 30c:	80 91 e4 00 	lds	r24, 0x00E4
 310:	89 17       	cp	r24, r25
 312:	29 f4       	brne	.+10     	; 0x31e <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 0d 01 	sts	0x010D, r24
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 31e:	80 91 0a 01 	lds	r24, 0x010A
 322:	88 23       	and	r24, r24
 324:	a1 f0       	breq	.+40     	; 0x34e <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
 326:	2f b7       	in	r18, 0x3f	; 63
		cli();
 328:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 32a:	30 93 e9 00 	sts	0x00E9, r19
 32e:	e9 cf       	rjmp	.-46     	; 0x302 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 330:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 334:	80 91 e8 00 	lds	r24, 0x00E8
 338:	85 fd       	sbrc	r24, 5
 33a:	03 c0       	rjmp	.+6      	; 0x342 <usb_serial_putchar+0x74>
 33c:	8a e3       	ldi	r24, 0x3A	; 58
 33e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 342:	85 e0       	ldi	r24, 0x05	; 5
 344:	80 93 0c 01 	sts	0x010C, r24
	SREG = intr_state;
 348:	2f bf       	out	0x3f, r18	; 63
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
	return 0;
 34e:	8f ef       	ldi	r24, 0xFF	; 255
}
 350:	08 95       	ret

00000352 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 360:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 364:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 368:	98 2f       	mov	r25, r24
 36a:	83 ff       	sbrs	r24, 3
 36c:	11 c0       	rjmp	.+34     	; 0x390 <__vector_10+0x3e>
		UENUM = 0;
 36e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 378:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 37c:	82 e1       	ldi	r24, 0x12	; 18
 37e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 388:	10 92 0a 01 	sts	0x010A, r1
		cdc_line_rtsdtr = 0;
 38c:	10 92 0b 01 	sts	0x010B, r1
        }
	if (intbits & (1<<SOFI)) {
 390:	92 ff       	sbrs	r25, 2
 392:	13 c0       	rjmp	.+38     	; 0x3ba <__vector_10+0x68>
		if (usb_configuration) {
 394:	80 91 0a 01 	lds	r24, 0x010A
 398:	88 23       	and	r24, r24
 39a:	79 f0       	breq	.+30     	; 0x3ba <__vector_10+0x68>
			t = transmit_flush_timer;
 39c:	80 91 0c 01 	lds	r24, 0x010C
			if (t) {
 3a0:	88 23       	and	r24, r24
 3a2:	59 f0       	breq	.+22     	; 0x3ba <__vector_10+0x68>
				transmit_flush_timer = --t;
 3a4:	81 50       	subi	r24, 0x01	; 1
 3a6:	80 93 0c 01 	sts	0x010C, r24
				if (!t) {
 3aa:	88 23       	and	r24, r24
 3ac:	31 f4       	brne	.+12     	; 0x3ba <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 3b4:	8a e3       	ldi	r24, 0x3A	; 58
 3b6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 3ee:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 3f2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 3f6:	83 ff       	sbrs	r24, 3
 3f8:	3c c1       	rjmp	.+632    	; 0x672 <__vector_11+0x2aa>
                bmRequestType = UEDATX;
 3fa:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 3fe:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 402:	80 91 f1 00 	lds	r24, 0x00F1
 406:	68 2f       	mov	r22, r24
 408:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 40a:	20 91 f1 00 	lds	r18, 0x00F1
 40e:	92 2f       	mov	r25, r18
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	68 2b       	or	r22, r24
 414:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 416:	80 91 f1 00 	lds	r24, 0x00F1
 41a:	a8 2f       	mov	r26, r24
 41c:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 41e:	20 91 f1 00 	lds	r18, 0x00F1
 422:	92 2f       	mov	r25, r18
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	a8 2b       	or	r26, r24
 428:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 42a:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 42e:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 432:	82 ef       	ldi	r24, 0xF2	; 242
 434:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 438:	36 30       	cpi	r19, 0x06	; 6
 43a:	09 f0       	breq	.+2      	; 0x43e <__vector_11+0x76>
 43c:	5a c0       	rjmp	.+180    	; 0x4f2 <__vector_11+0x12a>
 43e:	2e eb       	ldi	r18, 0xBE	; 190
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	a9 01       	movw	r20, r18
 444:	45 50       	subi	r20, 0x05	; 5
 446:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 448:	f9 01       	movw	r30, r18
 44a:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 44c:	85 91       	lpm	r24, Z+
 44e:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 450:	86 17       	cp	r24, r22
 452:	97 07       	cpc	r25, r23
 454:	01 f5       	brne	.+64     	; 0x496 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 456:	fa 01       	movw	r30, r20
 458:	85 91       	lpm	r24, Z+
 45a:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 45c:	8a 17       	cp	r24, r26
 45e:	9b 07       	cpc	r25, r27
 460:	d1 f4       	brne	.+52     	; 0x496 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 462:	9a 01       	movw	r18, r20
 464:	2e 5f       	subi	r18, 0xFE	; 254
 466:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 468:	f9 01       	movw	r30, r18
 46a:	65 91       	lpm	r22, Z+
 46c:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 46e:	2e 5f       	subi	r18, 0xFE	; 254
 470:	3f 4f       	sbci	r19, 0xFF	; 255
 472:	f9 01       	movw	r30, r18
 474:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 476:	21 2f       	mov	r18, r17
 478:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 47a:	90 2f       	mov	r25, r16
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	28 2b       	or	r18, r24
 480:	39 2b       	or	r19, r25
 482:	2f 3f       	cpi	r18, 0xFF	; 255
 484:	31 05       	cpc	r19, r1
 486:	19 f0       	breq	.+6      	; 0x48e <__vector_11+0xc6>
 488:	10 f0       	brcs	.+4      	; 0x48e <__vector_11+0xc6>
 48a:	2f ef       	ldi	r18, 0xFF	; 255
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	24 17       	cp	r18, r20
 490:	58 f4       	brcc	.+22     	; 0x4a8 <__vector_11+0xe0>
 492:	42 2f       	mov	r20, r18
 494:	09 c0       	rjmp	.+18     	; 0x4a8 <__vector_11+0xe0>
 496:	29 5f       	subi	r18, 0xF9	; 249
 498:	3f 4f       	sbci	r19, 0xFF	; 255
 49a:	49 5f       	subi	r20, 0xF9	; 249
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	28 3e       	cpi	r18, 0xE8	; 232
 4a2:	3f 07       	cpc	r19, r31
 4a4:	89 f6       	brne	.-94     	; 0x448 <__vector_11+0x80>
 4a6:	e5 c0       	rjmp	.+458    	; 0x672 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4a8:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 4aa:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	c9 01       	movw	r24, r18
 4b4:	85 70       	andi	r24, 0x05	; 5
 4b6:	90 70       	andi	r25, 0x00	; 0
 4b8:	89 2b       	or	r24, r25
 4ba:	b9 f3       	breq	.-18     	; 0x4aa <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 4bc:	22 fd       	sbrc	r18, 2
 4be:	dc c0       	rjmp	.+440    	; 0x678 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 4c0:	34 2f       	mov	r19, r20
 4c2:	41 31       	cpi	r20, 0x11	; 17
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <__vector_11+0x100>
 4c6:	30 e1       	ldi	r19, 0x10	; 16
 4c8:	23 2f       	mov	r18, r19
 4ca:	cb 01       	movw	r24, r22
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <__vector_11+0x112>
				for (i = n; i; i--) {
 4ce:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	e4 91       	lpm	r30, Z+
 4d4:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	22 23       	and	r18, r18
 4dc:	c1 f7       	brne	.-16     	; 0x4ce <__vector_11+0x106>
 4de:	63 0f       	add	r22, r19
 4e0:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 4e2:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4e4:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 4e8:	44 23       	and	r20, r20
 4ea:	f9 f6       	brne	.-66     	; 0x4aa <__vector_11+0xe2>
 4ec:	30 31       	cpi	r19, 0x10	; 16
 4ee:	e9 f2       	breq	.-70     	; 0x4aa <__vector_11+0xe2>
 4f0:	c3 c0       	rjmp	.+390    	; 0x678 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 4f2:	35 30       	cpi	r19, 0x05	; 5
 4f4:	61 f4       	brne	.+24     	; 0x50e <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4f6:	8e ef       	ldi	r24, 0xFE	; 254
 4f8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4fc:	80 91 e8 00 	lds	r24, 0x00E8
 500:	80 ff       	sbrs	r24, 0
 502:	fc cf       	rjmp	.-8      	; 0x4fc <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 504:	86 2f       	mov	r24, r22
 506:	80 68       	ori	r24, 0x80	; 128
 508:	80 93 e3 00 	sts	0x00E3, r24
 50c:	b5 c0       	rjmp	.+362    	; 0x678 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 50e:	39 30       	cpi	r19, 0x09	; 9
 510:	51 f5       	brne	.+84     	; 0x566 <__vector_11+0x19e>
 512:	44 23       	and	r20, r20
 514:	09 f0       	breq	.+2      	; 0x518 <__vector_11+0x150>
 516:	ad c0       	rjmp	.+346    	; 0x672 <__vector_11+0x2aa>
			usb_configuration = wValue;
 518:	60 93 0a 01 	sts	0x010A, r22
			cdc_line_rtsdtr = 0;
 51c:	10 92 0b 01 	sts	0x010B, r1
			transmit_flush_timer = 0;
 520:	10 92 0c 01 	sts	0x010C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 524:	8e ef       	ldi	r24, 0xFE	; 254
 526:	80 93 e8 00 	sts	0x00E8, r24
 52a:	81 ee       	ldi	r24, 0xE1	; 225
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 530:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 534:	fc 01       	movw	r30, r24
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	e4 91       	lpm	r30, Z+
				UECONX = en;
 53a:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 53e:	ee 23       	and	r30, r30
 540:	69 f0       	breq	.+26     	; 0x55c <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
 542:	ac 01       	movw	r20, r24
 544:	4f 5f       	subi	r20, 0xFF	; 255
 546:	5f 4f       	sbci	r21, 0xFF	; 255
 548:	fc 01       	movw	r30, r24
 54a:	84 91       	lpm	r24, Z+
 54c:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 550:	ca 01       	movw	r24, r20
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	fa 01       	movw	r30, r20
 556:	34 91       	lpm	r19, Z+
 558:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 55c:	2f 5f       	subi	r18, 0xFF	; 255
 55e:	25 30       	cpi	r18, 0x05	; 5
 560:	39 f7       	brne	.-50     	; 0x530 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 562:	8e e1       	ldi	r24, 0x1E	; 30
 564:	81 c0       	rjmp	.+258    	; 0x668 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 566:	38 30       	cpi	r19, 0x08	; 8
 568:	61 f4       	brne	.+24     	; 0x582 <__vector_11+0x1ba>
 56a:	40 38       	cpi	r20, 0x80	; 128
 56c:	09 f0       	breq	.+2      	; 0x570 <__vector_11+0x1a8>
 56e:	81 c0       	rjmp	.+258    	; 0x672 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 570:	80 91 e8 00 	lds	r24, 0x00E8
 574:	80 ff       	sbrs	r24, 0
 576:	fc cf       	rjmp	.-8      	; 0x570 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 578:	80 91 0a 01 	lds	r24, 0x010A
 57c:	80 93 f1 00 	sts	0x00F1, r24
 580:	50 c0       	rjmp	.+160    	; 0x622 <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 582:	31 32       	cpi	r19, 0x21	; 33
 584:	89 f4       	brne	.+34     	; 0x5a8 <__vector_11+0x1e0>
 586:	41 3a       	cpi	r20, 0xA1	; 161
 588:	09 f0       	breq	.+2      	; 0x58c <__vector_11+0x1c4>
 58a:	73 c0       	rjmp	.+230    	; 0x672 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 58c:	80 91 e8 00 	lds	r24, 0x00E8
 590:	80 ff       	sbrs	r24, 0
 592:	fc cf       	rjmp	.-8      	; 0x58c <__vector_11+0x1c4>
 594:	e2 e0       	ldi	r30, 0x02	; 2
 596:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 598:	81 91       	ld	r24, Z+
 59a:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	e9 30       	cpi	r30, 0x09	; 9
 5a2:	f8 07       	cpc	r31, r24
 5a4:	c9 f7       	brne	.-14     	; 0x598 <__vector_11+0x1d0>
 5a6:	3d c0       	rjmp	.+122    	; 0x622 <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 5a8:	30 32       	cpi	r19, 0x20	; 32
 5aa:	a1 f4       	brne	.+40     	; 0x5d4 <__vector_11+0x20c>
 5ac:	41 32       	cpi	r20, 0x21	; 33
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_11+0x1ea>
 5b0:	60 c0       	rjmp	.+192    	; 0x672 <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 5b2:	80 91 e8 00 	lds	r24, 0x00E8
 5b6:	82 ff       	sbrs	r24, 2
 5b8:	fc cf       	rjmp	.-8      	; 0x5b2 <__vector_11+0x1ea>
 5ba:	e2 e0       	ldi	r30, 0x02	; 2
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 5be:	80 91 f1 00 	lds	r24, 0x00F1
 5c2:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	e9 30       	cpi	r30, 0x09	; 9
 5c8:	f8 07       	cpc	r31, r24
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 5cc:	8b ef       	ldi	r24, 0xFB	; 251
 5ce:	80 93 e8 00 	sts	0x00E8, r24
 5d2:	27 c0       	rjmp	.+78     	; 0x622 <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 5d4:	32 32       	cpi	r19, 0x22	; 34
 5d6:	51 f4       	brne	.+20     	; 0x5ec <__vector_11+0x224>
 5d8:	41 32       	cpi	r20, 0x21	; 33
 5da:	09 f0       	breq	.+2      	; 0x5de <__vector_11+0x216>
 5dc:	4a c0       	rjmp	.+148    	; 0x672 <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
 5de:	60 93 0b 01 	sts	0x010B, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5e2:	80 91 e8 00 	lds	r24, 0x00E8
 5e6:	80 ff       	sbrs	r24, 0
 5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <__vector_11+0x21a>
 5ea:	1b c0       	rjmp	.+54     	; 0x622 <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 5ec:	33 23       	and	r19, r19
 5ee:	e9 f4       	brne	.+58     	; 0x62a <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5f0:	80 91 e8 00 	lds	r24, 0x00E8
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	fc cf       	rjmp	.-8      	; 0x5f0 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 5f8:	42 38       	cpi	r20, 0x82	; 130
 5fa:	11 f0       	breq	.+4      	; 0x600 <__vector_11+0x238>
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0d c0       	rjmp	.+26     	; 0x61a <__vector_11+0x252>
				UENUM = wIndex;
 600:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 604:	80 91 eb 00 	lds	r24, 0x00EB
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	25 e0       	ldi	r18, 0x05	; 5
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	2a 95       	dec	r18
 612:	e1 f7       	brne	.-8      	; 0x60c <__vector_11+0x244>
 614:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 616:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 61a:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 61e:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 622:	8e ef       	ldi	r24, 0xFE	; 254
 624:	80 93 e8 00 	sts	0x00E8, r24
 628:	27 c0       	rjmp	.+78     	; 0x678 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 62a:	31 30       	cpi	r19, 0x01	; 1
 62c:	11 f0       	breq	.+4      	; 0x632 <__vector_11+0x26a>
 62e:	33 30       	cpi	r19, 0x03	; 3
 630:	01 f5       	brne	.+64     	; 0x672 <__vector_11+0x2aa>
 632:	42 30       	cpi	r20, 0x02	; 2
 634:	f1 f4       	brne	.+60     	; 0x672 <__vector_11+0x2aa>
 636:	67 2b       	or	r22, r23
 638:	e1 f4       	brne	.+56     	; 0x672 <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 63a:	2a 2f       	mov	r18, r26
 63c:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 63e:	82 2f       	mov	r24, r18
 640:	81 50       	subi	r24, 0x01	; 1
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	b0 f4       	brcc	.+44     	; 0x672 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 646:	8e ef       	ldi	r24, 0xFE	; 254
 648:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 64c:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 650:	33 30       	cpi	r19, 0x03	; 3
 652:	79 f0       	breq	.+30     	; 0x672 <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 654:	89 e1       	ldi	r24, 0x19	; 25
 656:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <__vector_11+0x29c>
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	2a 95       	dec	r18
 666:	e2 f7       	brpl	.-8      	; 0x660 <__vector_11+0x298>
 668:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 66c:	10 92 ea 00 	sts	0x00EA, r1
 670:	03 c0       	rjmp	.+6      	; 0x678 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 672:	81 e2       	ldi	r24, 0x21	; 33
 674:	80 93 eb 00 	sts	0x00EB, r24
}
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	7f 91       	pop	r23
 686:	6f 91       	pop	r22
 688:	5f 91       	pop	r21
 68a:	4f 91       	pop	r20
 68c:	3f 91       	pop	r19
 68e:	2f 91       	pop	r18
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
